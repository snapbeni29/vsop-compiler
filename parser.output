Terminals unused in grammar

    "and"
    MOD


Grammar

    0 $accept: program $end

    1 program: %empty
    2        | class program

    3 class: "class" "type-identifier" class-parent "{" class-body "}"

    4 class-parent: %empty
    5             | "extends" "type-identifier"

    6 class-body: %empty
    7           | field class-body
    8           | method class-body

    9 field: "object-identifier" ":" type "<-" expr ";"
   10      | "object-identifier" ":" type ";"

   11 assignment: "object-identifier" "<-" expr

   12 method: "object-identifier" "(" formals ")" ":" type block

   13 type: "type-identifier"
   14     | "int32"
   15     | "bool"
   16     | "string"
   17     | "unit"

   18 formals: %empty
   19        | formal

   20 formal: "object-identifier" ":" type formal-supp

   21 formal-supp: %empty
   22            | "," formal

   23 block: "{" expr block-supp "}"

   24 block-supp: %empty
   25           | ";" expr block-supp

   26 expr: "if" expr "then" expr
   27     | "if" expr "then" expr "else" expr
   28     | "while" expr "do" expr
   29     | "let" "object-identifier" ":" type "in" expr
   30     | "let" "object-identifier" ":" type "<-" expr "in" expr
   31     | assignment
   32     | unary-op
   33     | binary-op
   34     | call
   35     | "new" "type-identifier"
   36     | "object-identifier"
   37     | "self"
   38     | literal
   39     | "(" ")"
   40     | "(" expr ")"
   41     | block

   42 literal: "integer-literal"
   43        | "string-literal"
   44        | boolean-literal

   45 boolean-literal: "true"
   46                | "false"

   47 args: %empty
   48     | arg

   49 arg: expr args-supp

   50 args-supp: %empty
   51          | "," arg

   52 call: "object-identifier" "(" args ")"
   53     | expr "." "object-identifier" "(" args ")"

   54 binary-op: expr "=" expr
   55          | expr "<" expr
   56          | expr "<=" expr
   57          | expr "+" expr
   58          | expr "-" expr
   59          | expr "*" expr
   60          | expr "/" expr
   61          | expr "^" expr

   62 unary-op: "not" expr
   63         | "-" expr
   64         | "isnull" expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    "class" <str> (258) 3
    "and" <str> (259)
    "bool" <str> (260) 15
    "do" <str> (261) 28
    "if" <str> (262) 26 27
    "else" <str> (263) 27
    "then" <str> (264) 26 27
    "extends" <str> (265) 5
    "false" <str> (266) 46
    "in" <str> (267) 29 30
    "int32" <str> (268) 14
    "isnull" <str> (269) 64
    "let" <str> (270) 29 30
    "new" <str> (271) 35
    "not" <str> (272) 62
    "self" <str> (273) 37
    "string" <str> (274) 16
    "true" <str> (275) 45
    "unit" <str> (276) 17
    "while" <str> (277) 28
    "{" <str> (278) 3 23
    "}" <str> (279) 3 23
    "(" <str> (280) 12 39 40 52 53
    ")" <str> (281) 12 39 40 52 53
    ":" <str> (282) 9 10 12 20 29 30
    ";" <str> (283) 9 10 25
    "," <str> (284) 22 51
    "+" <str> (285) 57
    "-" <str> (286) 58 63
    "*" <str> (287) 59
    "/" <str> (288) 60
    "^" <str> (289) 61
    "." <str> (290) 53
    "=" <str> (291) 54
    "<" <str> (292) 55
    "<=" <str> (293) 56
    "<-" <str> (294) 9 11 30
    "integer-literal" <integer> (295) 42
    "string-literal" <str> (296) 43
    "type-identifier" <str> (297) 3 5 13 35
    "object-identifier" <str> (298) 9 10 11 12 20 29 30 36 52 53
    MOD (299)


Nonterminals, with rules where they appear

    $accept (45)
        on left: 0
    class <_class> (46)
        on left: 3
        on right: 2
    class-parent <str> (47)
        on left: 4 5
        on right: 3
    type <str> (48)
        on left: 13 14 15 16 17
        on right: 9 10 12 20 29 30
    class-body <body> (49)
        on left: 6 7 8
        on right: 3 7 8
    field <field> (50)
        on left: 9 10
        on right: 7
    method <method> (51)
        on left: 12
        on right: 8
    formals <formals> (52)
        on left: 18 19
        on right: 12
    formal <formals> (53)
        on left: 20
        on right: 19 22
    formal-supp <formals> (54)
        on left: 21 22
        on right: 20
    block <block> (55)
        on left: 23
        on right: 12 41
    block-supp <block> (56)
        on left: 24 25
        on right: 23 25
    args <block> (57)
        on left: 47 48
        on right: 52 53
    arg <block> (58)
        on left: 49
        on right: 48 51
    args-supp <block> (59)
        on left: 50 51
        on right: 49
    expr <expr> (60)
        on left: 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41
        on right: 9 11 23 25 26 27 28 29 30 40 49 53 54 55 56 57 58 59 60 61 62 63 64
    literal <expr> (61)
        on left: 42 43 44
        on right: 38
    boolean-literal <expr> (62)
        on left: 45 46
        on right: 44
    unary-op <expr> (63)
        on left: 62 63 64
        on right: 32
    binary-op <expr> (64)
        on left: 54 55 56 57 58 59 60 61
        on right: 33
    call <expr> (65)
        on left: 52 53
        on right: 34
    assignment <expr> (66)
        on left: 11
        on right: 31
    program (67)
        on left: 1 2
        on right: 0 2


State 0

    0 $accept: . program $end

    "class"  shift, and go to state 1

    $default  reduce using rule 1 (program)

    class    go to state 2
    program  go to state 3


State 1

    3 class: "class" . "type-identifier" class-parent "{" class-body "}"

    "type-identifier"  shift, and go to state 4


State 2

    2 program: class . program

    "class"  shift, and go to state 1

    $default  reduce using rule 1 (program)

    class    go to state 2
    program  go to state 5


State 3

    0 $accept: program . $end

    $end  shift, and go to state 6


State 4

    3 class: "class" "type-identifier" . class-parent "{" class-body "}"

    "extends"  shift, and go to state 7

    $default  reduce using rule 4 (class-parent)

    class-parent  go to state 8


State 5

    2 program: class program .

    $default  reduce using rule 2 (program)


State 6

    0 $accept: program $end .

    $default  accept


State 7

    5 class-parent: "extends" . "type-identifier"

    "type-identifier"  shift, and go to state 9


State 8

    3 class: "class" "type-identifier" class-parent . "{" class-body "}"

    "{"  shift, and go to state 10


State 9

    5 class-parent: "extends" "type-identifier" .

    $default  reduce using rule 5 (class-parent)


State 10

    3 class: "class" "type-identifier" class-parent "{" . class-body "}"

    "object-identifier"  shift, and go to state 11

    $default  reduce using rule 6 (class-body)

    class-body  go to state 12
    field       go to state 13
    method      go to state 14


State 11

    9 field: "object-identifier" . ":" type "<-" expr ";"
   10      | "object-identifier" . ":" type ";"
   12 method: "object-identifier" . "(" formals ")" ":" type block

    "("  shift, and go to state 15
    ":"  shift, and go to state 16


State 12

    3 class: "class" "type-identifier" class-parent "{" class-body . "}"

    "}"  shift, and go to state 17


State 13

    7 class-body: field . class-body

    "object-identifier"  shift, and go to state 11

    $default  reduce using rule 6 (class-body)

    class-body  go to state 18
    field       go to state 13
    method      go to state 14


State 14

    8 class-body: method . class-body

    "object-identifier"  shift, and go to state 11

    $default  reduce using rule 6 (class-body)

    class-body  go to state 19
    field       go to state 13
    method      go to state 14


State 15

   12 method: "object-identifier" "(" . formals ")" ":" type block

    "object-identifier"  shift, and go to state 20

    $default  reduce using rule 18 (formals)

    formals  go to state 21
    formal   go to state 22


State 16

    9 field: "object-identifier" ":" . type "<-" expr ";"
   10      | "object-identifier" ":" . type ";"

    "bool"             shift, and go to state 23
    "int32"            shift, and go to state 24
    "string"           shift, and go to state 25
    "unit"             shift, and go to state 26
    "type-identifier"  shift, and go to state 27

    type  go to state 28


State 17

    3 class: "class" "type-identifier" class-parent "{" class-body "}" .

    $default  reduce using rule 3 (class)


State 18

    7 class-body: field class-body .

    $default  reduce using rule 7 (class-body)


State 19

    8 class-body: method class-body .

    $default  reduce using rule 8 (class-body)


State 20

   20 formal: "object-identifier" . ":" type formal-supp

    ":"  shift, and go to state 29


State 21

   12 method: "object-identifier" "(" formals . ")" ":" type block

    ")"  shift, and go to state 30


State 22

   19 formals: formal .

    $default  reduce using rule 19 (formals)


State 23

   15 type: "bool" .

    $default  reduce using rule 15 (type)


State 24

   14 type: "int32" .

    $default  reduce using rule 14 (type)


State 25

   16 type: "string" .

    $default  reduce using rule 16 (type)


State 26

   17 type: "unit" .

    $default  reduce using rule 17 (type)


State 27

   13 type: "type-identifier" .

    $default  reduce using rule 13 (type)


State 28

    9 field: "object-identifier" ":" type . "<-" expr ";"
   10      | "object-identifier" ":" type . ";"

    ";"   shift, and go to state 31
    "<-"  shift, and go to state 32


State 29

   20 formal: "object-identifier" ":" . type formal-supp

    "bool"             shift, and go to state 23
    "int32"            shift, and go to state 24
    "string"           shift, and go to state 25
    "unit"             shift, and go to state 26
    "type-identifier"  shift, and go to state 27

    type  go to state 33


State 30

   12 method: "object-identifier" "(" formals ")" . ":" type block

    ":"  shift, and go to state 34


State 31

   10 field: "object-identifier" ":" type ";" .

    $default  reduce using rule 10 (field)


State 32

    9 field: "object-identifier" ":" type "<-" . expr ";"

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    block            go to state 50
    expr             go to state 51
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 33

   20 formal: "object-identifier" ":" type . formal-supp

    ","  shift, and go to state 58

    $default  reduce using rule 21 (formal-supp)

    formal-supp  go to state 59


State 34

   12 method: "object-identifier" "(" formals ")" ":" . type block

    "bool"             shift, and go to state 23
    "int32"            shift, and go to state 24
    "string"           shift, and go to state 25
    "unit"             shift, and go to state 26
    "type-identifier"  shift, and go to state 27

    type  go to state 60


State 35

   26 expr: "if" . expr "then" expr
   27     | "if" . expr "then" expr "else" expr

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    block            go to state 50
    expr             go to state 61
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 36

   46 boolean-literal: "false" .

    $default  reduce using rule 46 (boolean-literal)


State 37

   64 unary-op: "isnull" . expr

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    block            go to state 50
    expr             go to state 62
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 38

   29 expr: "let" . "object-identifier" ":" type "in" expr
   30     | "let" . "object-identifier" ":" type "<-" expr "in" expr

    "object-identifier"  shift, and go to state 63


State 39

   35 expr: "new" . "type-identifier"

    "type-identifier"  shift, and go to state 64


State 40

   62 unary-op: "not" . expr

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    block            go to state 50
    expr             go to state 65
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 41

   37 expr: "self" .

    $default  reduce using rule 37 (expr)


State 42

   45 boolean-literal: "true" .

    $default  reduce using rule 45 (boolean-literal)


State 43

   28 expr: "while" . expr "do" expr

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    block            go to state 50
    expr             go to state 66
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 44

   23 block: "{" . expr block-supp "}"

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    block            go to state 50
    expr             go to state 67
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 45

   39 expr: "(" . ")"
   40     | "(" . expr ")"

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    ")"                  shift, and go to state 68
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    block            go to state 50
    expr             go to state 69
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 46

   63 unary-op: "-" . expr

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    block            go to state 50
    expr             go to state 70
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 47

   42 literal: "integer-literal" .

    $default  reduce using rule 42 (literal)


State 48

   43 literal: "string-literal" .

    $default  reduce using rule 43 (literal)


State 49

   11 assignment: "object-identifier" . "<-" expr
   36 expr: "object-identifier" .
   52 call: "object-identifier" . "(" args ")"

    "("   shift, and go to state 71
    "<-"  shift, and go to state 72

    $default  reduce using rule 36 (expr)


State 50

   41 expr: block .

    $default  reduce using rule 41 (expr)


State 51

    9 field: "object-identifier" ":" type "<-" expr . ";"
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    ";"   shift, and go to state 73
    "+"   shift, and go to state 74
    "-"   shift, and go to state 75
    "*"   shift, and go to state 76
    "/"   shift, and go to state 77
    "^"   shift, and go to state 78
    "."   shift, and go to state 79
    "="   shift, and go to state 80
    "<"   shift, and go to state 81
    "<="  shift, and go to state 82


State 52

   38 expr: literal .

    $default  reduce using rule 38 (expr)


State 53

   44 literal: boolean-literal .

    $default  reduce using rule 44 (literal)


State 54

   32 expr: unary-op .

    $default  reduce using rule 32 (expr)


State 55

   33 expr: binary-op .

    $default  reduce using rule 33 (expr)


State 56

   34 expr: call .

    $default  reduce using rule 34 (expr)


State 57

   31 expr: assignment .

    $default  reduce using rule 31 (expr)


State 58

   22 formal-supp: "," . formal

    "object-identifier"  shift, and go to state 20

    formal  go to state 83


State 59

   20 formal: "object-identifier" ":" type formal-supp .

    $default  reduce using rule 20 (formal)


State 60

   12 method: "object-identifier" "(" formals ")" ":" type . block

    "{"  shift, and go to state 44

    block  go to state 84


State 61

   26 expr: "if" expr . "then" expr
   27     | "if" expr . "then" expr "else" expr
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "then"  shift, and go to state 85
    "+"     shift, and go to state 74
    "-"     shift, and go to state 75
    "*"     shift, and go to state 76
    "/"     shift, and go to state 77
    "^"     shift, and go to state 78
    "."     shift, and go to state 79
    "="     shift, and go to state 80
    "<"     shift, and go to state 81
    "<="    shift, and go to state 82


State 62

   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr
   64 unary-op: "isnull" expr .

    "^"  shift, and go to state 78
    "."  shift, and go to state 79

    $default  reduce using rule 64 (unary-op)


State 63

   29 expr: "let" "object-identifier" . ":" type "in" expr
   30     | "let" "object-identifier" . ":" type "<-" expr "in" expr

    ":"  shift, and go to state 86


State 64

   35 expr: "new" "type-identifier" .

    $default  reduce using rule 35 (expr)


State 65

   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr
   62 unary-op: "not" expr .

    "+"   shift, and go to state 74
    "-"   shift, and go to state 75
    "*"   shift, and go to state 76
    "/"   shift, and go to state 77
    "^"   shift, and go to state 78
    "."   shift, and go to state 79
    "="   shift, and go to state 80
    "<"   shift, and go to state 81
    "<="  shift, and go to state 82

    $default  reduce using rule 62 (unary-op)


State 66

   28 expr: "while" expr . "do" expr
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "do"  shift, and go to state 87
    "+"   shift, and go to state 74
    "-"   shift, and go to state 75
    "*"   shift, and go to state 76
    "/"   shift, and go to state 77
    "^"   shift, and go to state 78
    "."   shift, and go to state 79
    "="   shift, and go to state 80
    "<"   shift, and go to state 81
    "<="  shift, and go to state 82


State 67

   23 block: "{" expr . block-supp "}"
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    ";"   shift, and go to state 88
    "+"   shift, and go to state 74
    "-"   shift, and go to state 75
    "*"   shift, and go to state 76
    "/"   shift, and go to state 77
    "^"   shift, and go to state 78
    "."   shift, and go to state 79
    "="   shift, and go to state 80
    "<"   shift, and go to state 81
    "<="  shift, and go to state 82

    $default  reduce using rule 24 (block-supp)

    block-supp  go to state 89


State 68

   39 expr: "(" ")" .

    $default  reduce using rule 39 (expr)


State 69

   40 expr: "(" expr . ")"
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    ")"   shift, and go to state 90
    "+"   shift, and go to state 74
    "-"   shift, and go to state 75
    "*"   shift, and go to state 76
    "/"   shift, and go to state 77
    "^"   shift, and go to state 78
    "."   shift, and go to state 79
    "="   shift, and go to state 80
    "<"   shift, and go to state 81
    "<="  shift, and go to state 82


State 70

   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr
   63 unary-op: "-" expr .

    "*"  shift, and go to state 76
    "/"  shift, and go to state 77
    "^"  shift, and go to state 78
    "."  shift, and go to state 79

    $default  reduce using rule 63 (unary-op)


State 71

   52 call: "object-identifier" "(" . args ")"

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    $default  reduce using rule 47 (args)

    block            go to state 50
    args             go to state 91
    arg              go to state 92
    expr             go to state 93
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 72

   11 assignment: "object-identifier" "<-" . expr

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    block            go to state 50
    expr             go to state 94
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 73

    9 field: "object-identifier" ":" type "<-" expr ";" .

    $default  reduce using rule 9 (field)


State 74

   57 binary-op: expr "+" . expr

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    block            go to state 50
    expr             go to state 95
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 75

   58 binary-op: expr "-" . expr

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    block            go to state 50
    expr             go to state 96
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 76

   59 binary-op: expr "*" . expr

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    block            go to state 50
    expr             go to state 97
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 77

   60 binary-op: expr "/" . expr

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    block            go to state 50
    expr             go to state 98
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 78

   61 binary-op: expr "^" . expr

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    block            go to state 50
    expr             go to state 99
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 79

   53 call: expr "." . "object-identifier" "(" args ")"

    "object-identifier"  shift, and go to state 100


State 80

   54 binary-op: expr "=" . expr

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    block            go to state 50
    expr             go to state 101
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 81

   55 binary-op: expr "<" . expr

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    block            go to state 50
    expr             go to state 102
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 82

   56 binary-op: expr "<=" . expr

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    block            go to state 50
    expr             go to state 103
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 83

   22 formal-supp: "," formal .

    $default  reduce using rule 22 (formal-supp)


State 84

   12 method: "object-identifier" "(" formals ")" ":" type block .

    $default  reduce using rule 12 (method)


State 85

   26 expr: "if" expr "then" . expr
   27     | "if" expr "then" . expr "else" expr

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    block            go to state 50
    expr             go to state 104
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 86

   29 expr: "let" "object-identifier" ":" . type "in" expr
   30     | "let" "object-identifier" ":" . type "<-" expr "in" expr

    "bool"             shift, and go to state 23
    "int32"            shift, and go to state 24
    "string"           shift, and go to state 25
    "unit"             shift, and go to state 26
    "type-identifier"  shift, and go to state 27

    type  go to state 105


State 87

   28 expr: "while" expr "do" . expr

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    block            go to state 50
    expr             go to state 106
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 88

   25 block-supp: ";" . expr block-supp

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    block            go to state 50
    expr             go to state 107
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 89

   23 block: "{" expr block-supp . "}"

    "}"  shift, and go to state 108


State 90

   40 expr: "(" expr ")" .

    $default  reduce using rule 40 (expr)


State 91

   52 call: "object-identifier" "(" args . ")"

    ")"  shift, and go to state 109


State 92

   48 args: arg .

    $default  reduce using rule 48 (args)


State 93

   49 arg: expr . args-supp
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    ","   shift, and go to state 110
    "+"   shift, and go to state 74
    "-"   shift, and go to state 75
    "*"   shift, and go to state 76
    "/"   shift, and go to state 77
    "^"   shift, and go to state 78
    "."   shift, and go to state 79
    "="   shift, and go to state 80
    "<"   shift, and go to state 81
    "<="  shift, and go to state 82

    $default  reduce using rule 50 (args-supp)

    args-supp  go to state 111


State 94

   11 assignment: "object-identifier" "<-" expr .
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "+"   shift, and go to state 74
    "-"   shift, and go to state 75
    "*"   shift, and go to state 76
    "/"   shift, and go to state 77
    "^"   shift, and go to state 78
    "."   shift, and go to state 79
    "="   shift, and go to state 80
    "<"   shift, and go to state 81
    "<="  shift, and go to state 82

    $default  reduce using rule 11 (assignment)


State 95

   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   57          | expr "+" expr .
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "*"  shift, and go to state 76
    "/"  shift, and go to state 77
    "^"  shift, and go to state 78
    "."  shift, and go to state 79

    $default  reduce using rule 57 (binary-op)


State 96

   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   58          | expr "-" expr .
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "*"  shift, and go to state 76
    "/"  shift, and go to state 77
    "^"  shift, and go to state 78
    "."  shift, and go to state 79

    $default  reduce using rule 58 (binary-op)


State 97

   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   59          | expr "*" expr .
   60          | expr . "/" expr
   61          | expr . "^" expr

    "^"  shift, and go to state 78
    "."  shift, and go to state 79

    $default  reduce using rule 59 (binary-op)


State 98

   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   60          | expr "/" expr .
   61          | expr . "^" expr

    "^"  shift, and go to state 78
    "."  shift, and go to state 79

    $default  reduce using rule 60 (binary-op)


State 99

   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr
   61          | expr "^" expr .

    "^"  shift, and go to state 78
    "."  shift, and go to state 79

    $default  reduce using rule 61 (binary-op)


State 100

   53 call: expr "." "object-identifier" . "(" args ")"

    "("  shift, and go to state 112


State 101

   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   54          | expr "=" expr .
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "+"  shift, and go to state 74
    "-"  shift, and go to state 75
    "*"  shift, and go to state 76
    "/"  shift, and go to state 77
    "^"  shift, and go to state 78
    "."  shift, and go to state 79

    "="   error (nonassociative)
    "<"   error (nonassociative)
    "<="  error (nonassociative)

    $default  reduce using rule 54 (binary-op)


State 102

   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   55          | expr "<" expr .
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "+"  shift, and go to state 74
    "-"  shift, and go to state 75
    "*"  shift, and go to state 76
    "/"  shift, and go to state 77
    "^"  shift, and go to state 78
    "."  shift, and go to state 79

    "="   error (nonassociative)
    "<"   error (nonassociative)
    "<="  error (nonassociative)

    $default  reduce using rule 55 (binary-op)


State 103

   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   56          | expr "<=" expr .
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "+"  shift, and go to state 74
    "-"  shift, and go to state 75
    "*"  shift, and go to state 76
    "/"  shift, and go to state 77
    "^"  shift, and go to state 78
    "."  shift, and go to state 79

    "="   error (nonassociative)
    "<"   error (nonassociative)
    "<="  error (nonassociative)

    $default  reduce using rule 56 (binary-op)


State 104

   26 expr: "if" expr "then" expr .
   27     | "if" expr "then" expr . "else" expr
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "else"  shift, and go to state 113
    "+"     shift, and go to state 74
    "-"     shift, and go to state 75
    "*"     shift, and go to state 76
    "/"     shift, and go to state 77
    "^"     shift, and go to state 78
    "."     shift, and go to state 79
    "="     shift, and go to state 80
    "<"     shift, and go to state 81
    "<="    shift, and go to state 82

    $default  reduce using rule 26 (expr)


State 105

   29 expr: "let" "object-identifier" ":" type . "in" expr
   30     | "let" "object-identifier" ":" type . "<-" expr "in" expr

    "in"  shift, and go to state 114
    "<-"  shift, and go to state 115


State 106

   28 expr: "while" expr "do" expr .
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "+"   shift, and go to state 74
    "-"   shift, and go to state 75
    "*"   shift, and go to state 76
    "/"   shift, and go to state 77
    "^"   shift, and go to state 78
    "."   shift, and go to state 79
    "="   shift, and go to state 80
    "<"   shift, and go to state 81
    "<="  shift, and go to state 82

    $default  reduce using rule 28 (expr)


State 107

   25 block-supp: ";" expr . block-supp
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    ";"   shift, and go to state 88
    "+"   shift, and go to state 74
    "-"   shift, and go to state 75
    "*"   shift, and go to state 76
    "/"   shift, and go to state 77
    "^"   shift, and go to state 78
    "."   shift, and go to state 79
    "="   shift, and go to state 80
    "<"   shift, and go to state 81
    "<="  shift, and go to state 82

    $default  reduce using rule 24 (block-supp)

    block-supp  go to state 116


State 108

   23 block: "{" expr block-supp "}" .

    $default  reduce using rule 23 (block)


State 109

   52 call: "object-identifier" "(" args ")" .

    $default  reduce using rule 52 (call)


State 110

   51 args-supp: "," . arg

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    block            go to state 50
    arg              go to state 117
    expr             go to state 93
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 111

   49 arg: expr args-supp .

    $default  reduce using rule 49 (arg)


State 112

   53 call: expr "." "object-identifier" "(" . args ")"

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    $default  reduce using rule 47 (args)

    block            go to state 50
    args             go to state 118
    arg              go to state 92
    expr             go to state 93
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 113

   27 expr: "if" expr "then" expr "else" . expr

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    block            go to state 50
    expr             go to state 119
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 114

   29 expr: "let" "object-identifier" ":" type "in" . expr

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    block            go to state 50
    expr             go to state 120
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 115

   30 expr: "let" "object-identifier" ":" type "<-" . expr "in" expr

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    block            go to state 50
    expr             go to state 121
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 116

   25 block-supp: ";" expr block-supp .

    $default  reduce using rule 25 (block-supp)


State 117

   51 args-supp: "," arg .

    $default  reduce using rule 51 (args-supp)


State 118

   53 call: expr "." "object-identifier" "(" args . ")"

    ")"  shift, and go to state 122


State 119

   27 expr: "if" expr "then" expr "else" expr .
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "+"   shift, and go to state 74
    "-"   shift, and go to state 75
    "*"   shift, and go to state 76
    "/"   shift, and go to state 77
    "^"   shift, and go to state 78
    "."   shift, and go to state 79
    "="   shift, and go to state 80
    "<"   shift, and go to state 81
    "<="  shift, and go to state 82

    $default  reduce using rule 27 (expr)


State 120

   29 expr: "let" "object-identifier" ":" type "in" expr .
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "+"   shift, and go to state 74
    "-"   shift, and go to state 75
    "*"   shift, and go to state 76
    "/"   shift, and go to state 77
    "^"   shift, and go to state 78
    "."   shift, and go to state 79
    "="   shift, and go to state 80
    "<"   shift, and go to state 81
    "<="  shift, and go to state 82

    $default  reduce using rule 29 (expr)


State 121

   30 expr: "let" "object-identifier" ":" type "<-" expr . "in" expr
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "in"  shift, and go to state 123
    "+"   shift, and go to state 74
    "-"   shift, and go to state 75
    "*"   shift, and go to state 76
    "/"   shift, and go to state 77
    "^"   shift, and go to state 78
    "."   shift, and go to state 79
    "="   shift, and go to state 80
    "<"   shift, and go to state 81
    "<="  shift, and go to state 82


State 122

   53 call: expr "." "object-identifier" "(" args ")" .

    $default  reduce using rule 53 (call)


State 123

   30 expr: "let" "object-identifier" ":" type "<-" expr "in" . expr

    "if"                 shift, and go to state 35
    "false"              shift, and go to state 36
    "isnull"             shift, and go to state 37
    "let"                shift, and go to state 38
    "new"                shift, and go to state 39
    "not"                shift, and go to state 40
    "self"               shift, and go to state 41
    "true"               shift, and go to state 42
    "while"              shift, and go to state 43
    "{"                  shift, and go to state 44
    "("                  shift, and go to state 45
    "-"                  shift, and go to state 46
    "integer-literal"    shift, and go to state 47
    "string-literal"     shift, and go to state 48
    "object-identifier"  shift, and go to state 49

    block            go to state 50
    expr             go to state 124
    literal          go to state 52
    boolean-literal  go to state 53
    unary-op         go to state 54
    binary-op        go to state 55
    call             go to state 56
    assignment       go to state 57


State 124

   30 expr: "let" "object-identifier" ":" type "<-" expr "in" expr .
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "+"   shift, and go to state 74
    "-"   shift, and go to state 75
    "*"   shift, and go to state 76
    "/"   shift, and go to state 77
    "^"   shift, and go to state 78
    "."   shift, and go to state 79
    "="   shift, and go to state 80
    "<"   shift, and go to state 81
    "<="  shift, and go to state 82

    $default  reduce using rule 30 (expr)
