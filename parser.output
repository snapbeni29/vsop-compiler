Nonterminals useless in grammar

    literal
    boolean-literal
    args
    arg
    args-supp
    call
    binary-op
    unary-op


Terminals unused in grammar

    "integer-literal"
    "real-literal"
    "string-literal"
    "and"
    "break"
    "do"
    "double"
    "else"
    "extern"
    "false"
    "for"
    "if"
    "in"
    "isnull"
    "let"
    "lets"
    "new"
    "not"
    "mod"
    "or"
    "self"
    "then"
    "to"
    "true"
    "while"
    "vararg"
    "+"
    "-"
    "*"
    "/"
    "^"
    "."
    "="
    "!="
    "<"
    "<="
    ">"
    ">="
    UMINUS


Rules useless in grammar

   30 literal: "integer-literal"
   31        | "string-literal"
   32        | boolean-literal

   33 boolean-literal: "true"
   34                | "false"

   35 args: %empty
   36     | arg

   37 arg: expr args-supp

   38 args-supp: %empty
   39          | "," arg

   40 call: "object-identifier" "(" args ")"
   41     | expr "." "object-identifier" "(" args ")"

   42 binary-op: "="
   43          | "<"
   44          | "<="
   45          | "+"
   46          | "-"
   47          | "*"
   48          | "/"
   49          | "^"

   50 unary-op: "not" expr
   51         | "-" expr
   52         | "isnull" expr


Grammar

    0 $accept: program "end-of-file"

    1 program: %empty
    2        | class program

    3 class: "class" "type-identifier" class-parent "{" class-body "}"

    4 class-parent: %empty
    5             | "extends" "type-identifier"

    6 class-body: %empty
    7           | class-body field
    8           | class-body method

    9 field: formal opt-assignment ";"

   10 opt-assignment: %empty
   11               | assignment

   12 assignment: "<-" expr

   13 method: "object-identifier" "(" formals ")" ":" type block

   14 type: "type-identifier"
   15     | "int32"
   16     | "bool"
   17     | "string"
   18     | "unit"

   19 formals: %empty
   20        | formal

   21 formal: "object-identifier" ":" type formal-supp

   22 formal-supp: %empty
   23            | "," formal

   24 block: "{" expr block-supp "}"

   25 block-supp: %empty
   26           | ";" expr block-supp

   27 expr: %empty
   28     | "(" ")"
   29     | block


Terminals, with rules where they appear

    "end-of-file" (0) 0
    error (256)
    "integer-literal" <int32> (258)
    "real-literal" <doubl> (259)
    "string-literal" <id> (260)
    "type-identifier" <id> (261) 3 5 14
    "object-identifier" <id> (262) 13 21
    "and" <id> (263)
    "bool" <id> (264) 16
    "break" <id> (265)
    "class" <id> (266) 3
    "do" <id> (267)
    "double" <id> (268)
    "else" <id> (269)
    "extends" <id> (270) 5
    "extern" <id> (271)
    "false" <id> (272)
    "for" <id> (273)
    "if" <id> (274)
    "in" <id> (275)
    "int32" <id> (276) 15
    "isnull" <id> (277)
    "let" <id> (278)
    "lets" <id> (279)
    "new" <id> (280)
    "not" <id> (281)
    "mod" <id> (282)
    "or" <id> (283)
    "self" <id> (284)
    "string" <id> (285) 17
    "then" <id> (286)
    "to" <id> (287)
    "true" <id> (288)
    "unit" <id> (289) 18
    "while" <id> (290)
    "vararg" <id> (291)
    "{" <id> (292) 3 24
    "}" <id> (293) 3 24
    "(" <id> (294) 13 28
    ")" <id> (295) 13 28
    ":" <id> (296) 13 21
    ";" <id> (297) 9 26
    "," <id> (298) 23
    "+" <id> (299)
    "-" <id> (300)
    "*" <id> (301)
    "/" <id> (302)
    "^" <id> (303)
    "." <id> (304)
    "=" <id> (305)
    "!=" <id> (306)
    "<" <id> (307)
    "<=" <id> (308)
    ">" <id> (309)
    ">=" <id> (310)
    "<-" <id> (311) 12
    UMINUS (312)


Nonterminals, with rules where they appear

    $accept (58)
        on left: 0
    program (59)
        on left: 1 2
        on right: 0 2
    class (60)
        on left: 3
        on right: 2
    class-parent (61)
        on left: 4 5
        on right: 3
    class-body (62)
        on left: 6 7 8
        on right: 3 7 8
    field (63)
        on left: 9
        on right: 7
    opt-assignment (64)
        on left: 10 11
        on right: 9
    assignment (65)
        on left: 12
        on right: 11
    method (66)
        on left: 13
        on right: 8
    type (67)
        on left: 14 15 16 17 18
        on right: 13 21
    formals (68)
        on left: 19 20
        on right: 13
    formal (69)
        on left: 21
        on right: 9 20 23
    formal-supp (70)
        on left: 22 23
        on right: 21
    block (71)
        on left: 24
        on right: 13 29
    block-supp (72)
        on left: 25 26
        on right: 24 26
    expr (73)
        on left: 27 28 29
        on right: 12 24 26


State 0

    0 $accept: . program "end-of-file"

    "class"  shift, and go to state 1

    $default  reduce using rule 1 (program)

    program  go to state 2
    class    go to state 3


State 1

    3 class: "class" . "type-identifier" class-parent "{" class-body "}"

    "type-identifier"  shift, and go to state 4


State 2

    0 $accept: program . "end-of-file"

    "end-of-file"  shift, and go to state 5


State 3

    2 program: class . program

    "class"  shift, and go to state 1

    $default  reduce using rule 1 (program)

    program  go to state 6
    class    go to state 3


State 4

    3 class: "class" "type-identifier" . class-parent "{" class-body "}"

    "extends"  shift, and go to state 7

    $default  reduce using rule 4 (class-parent)

    class-parent  go to state 8


State 5

    0 $accept: program "end-of-file" .

    $default  accept


State 6

    2 program: class program .

    $default  reduce using rule 2 (program)


State 7

    5 class-parent: "extends" . "type-identifier"

    "type-identifier"  shift, and go to state 9


State 8

    3 class: "class" "type-identifier" class-parent . "{" class-body "}"

    "{"  shift, and go to state 10


State 9

    5 class-parent: "extends" "type-identifier" .

    $default  reduce using rule 5 (class-parent)


State 10

    3 class: "class" "type-identifier" class-parent "{" . class-body "}"

    $default  reduce using rule 6 (class-body)

    class-body  go to state 11


State 11

    3 class: "class" "type-identifier" class-parent "{" class-body . "}"
    7 class-body: class-body . field
    8           | class-body . method

    "object-identifier"  shift, and go to state 12
    "}"                  shift, and go to state 13

    field   go to state 14
    method  go to state 15
    formal  go to state 16


State 12

   13 method: "object-identifier" . "(" formals ")" ":" type block
   21 formal: "object-identifier" . ":" type formal-supp

    "("  shift, and go to state 17
    ":"  shift, and go to state 18


State 13

    3 class: "class" "type-identifier" class-parent "{" class-body "}" .

    $default  reduce using rule 3 (class)


State 14

    7 class-body: class-body field .

    $default  reduce using rule 7 (class-body)


State 15

    8 class-body: class-body method .

    $default  reduce using rule 8 (class-body)


State 16

    9 field: formal . opt-assignment ";"

    "<-"  shift, and go to state 19

    $default  reduce using rule 10 (opt-assignment)

    opt-assignment  go to state 20
    assignment      go to state 21


State 17

   13 method: "object-identifier" "(" . formals ")" ":" type block

    "object-identifier"  shift, and go to state 22

    $default  reduce using rule 19 (formals)

    formals  go to state 23
    formal   go to state 24


State 18

   21 formal: "object-identifier" ":" . type formal-supp

    "type-identifier"  shift, and go to state 25
    "bool"             shift, and go to state 26
    "int32"            shift, and go to state 27
    "string"           shift, and go to state 28
    "unit"             shift, and go to state 29

    type  go to state 30


State 19

   12 assignment: "<-" . expr

    "{"  shift, and go to state 31
    "("  shift, and go to state 32

    $default  reduce using rule 27 (expr)

    block  go to state 33
    expr   go to state 34


State 20

    9 field: formal opt-assignment . ";"

    ";"  shift, and go to state 35


State 21

   11 opt-assignment: assignment .

    $default  reduce using rule 11 (opt-assignment)


State 22

   21 formal: "object-identifier" . ":" type formal-supp

    ":"  shift, and go to state 18


State 23

   13 method: "object-identifier" "(" formals . ")" ":" type block

    ")"  shift, and go to state 36


State 24

   20 formals: formal .

    $default  reduce using rule 20 (formals)


State 25

   14 type: "type-identifier" .

    $default  reduce using rule 14 (type)


State 26

   16 type: "bool" .

    $default  reduce using rule 16 (type)


State 27

   15 type: "int32" .

    $default  reduce using rule 15 (type)


State 28

   17 type: "string" .

    $default  reduce using rule 17 (type)


State 29

   18 type: "unit" .

    $default  reduce using rule 18 (type)


State 30

   21 formal: "object-identifier" ":" type . formal-supp

    ","  shift, and go to state 37

    $default  reduce using rule 22 (formal-supp)

    formal-supp  go to state 38


State 31

   24 block: "{" . expr block-supp "}"

    "{"  shift, and go to state 31
    "("  shift, and go to state 32

    $default  reduce using rule 27 (expr)

    block  go to state 33
    expr   go to state 39


State 32

   28 expr: "(" . ")"

    ")"  shift, and go to state 40


State 33

   29 expr: block .

    $default  reduce using rule 29 (expr)


State 34

   12 assignment: "<-" expr .

    $default  reduce using rule 12 (assignment)


State 35

    9 field: formal opt-assignment ";" .

    $default  reduce using rule 9 (field)


State 36

   13 method: "object-identifier" "(" formals ")" . ":" type block

    ":"  shift, and go to state 41


State 37

   23 formal-supp: "," . formal

    "object-identifier"  shift, and go to state 22

    formal  go to state 42


State 38

   21 formal: "object-identifier" ":" type formal-supp .

    $default  reduce using rule 21 (formal)


State 39

   24 block: "{" expr . block-supp "}"

    ";"  shift, and go to state 43

    $default  reduce using rule 25 (block-supp)

    block-supp  go to state 44


State 40

   28 expr: "(" ")" .

    $default  reduce using rule 28 (expr)


State 41

   13 method: "object-identifier" "(" formals ")" ":" . type block

    "type-identifier"  shift, and go to state 25
    "bool"             shift, and go to state 26
    "int32"            shift, and go to state 27
    "string"           shift, and go to state 28
    "unit"             shift, and go to state 29

    type  go to state 45


State 42

   23 formal-supp: "," formal .

    $default  reduce using rule 23 (formal-supp)


State 43

   26 block-supp: ";" . expr block-supp

    "{"  shift, and go to state 31
    "("  shift, and go to state 32

    $default  reduce using rule 27 (expr)

    block  go to state 33
    expr   go to state 46


State 44

   24 block: "{" expr block-supp . "}"

    "}"  shift, and go to state 47


State 45

   13 method: "object-identifier" "(" formals ")" ":" type . block

    "{"  shift, and go to state 31

    block  go to state 48


State 46

   26 block-supp: ";" expr . block-supp

    ";"  shift, and go to state 43

    $default  reduce using rule 25 (block-supp)

    block-supp  go to state 49


State 47

   24 block: "{" expr block-supp "}" .

    $default  reduce using rule 24 (block)


State 48

   13 method: "object-identifier" "(" formals ")" ":" type block .

    $default  reduce using rule 13 (method)


State 49

   26 block-supp: ";" expr block-supp .

    $default  reduce using rule 26 (block-supp)
