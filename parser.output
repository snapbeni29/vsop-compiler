Terminals unused in grammar

    "and"
    "break"
    "double"
    "extern"
    "for"
    "vararg"
    UMINUS
    MOD


Grammar

    0 $accept: program "end-of-file"

    1 program: %empty
    2        | class program

    3 class: "class" "type-identifier" class-parent "{" class-body "}"

    4 class-parent: %empty
    5             | "extends" "type-identifier"

    6 class-body: %empty
    7           | class-body field
    8           | class-body method

    9 field: "object-identifier" ":" type "<-" expr ";"
   10      | "object-identifier" ":" type ";"

   11 assignment: "object-identifier" "<-" expr

   12 method: "object-identifier" "(" formals ")" ":" type block

   13 type: "type-identifier"
   14     | "int32"
   15     | "bool"
   16     | "string"
   17     | "unit"

   18 formals: %empty
   19        | formal

   20 formal: "object-identifier" ":" type formal-supp

   21 formal-supp: %empty
   22            | "," formal

   23 block: "{" expr block-supp "}"

   24 block-supp: %empty
   25           | ";" expr block-supp

   26 expr: "if" expr "then" expr
   27     | "if" expr "then" expr "else" expr
   28     | "while" expr "do" expr
   29     | "let" "object-identifier" ":" type "in" expr
   30     | "let" "object-identifier" ":" type "<-" expr "in" expr
   31     | assignment
   32     | unary-op
   33     | binary-op
   34     | call
   35     | "new" "type-identifier"
   36     | "object-identifier"
   37     | "self"
   38     | literal
   39     | "(" ")"
   40     | "(" expr ")"
   41     | block

   42 literal: "integer-literal"
   43        | "string-literal"
   44        | boolean-literal

   45 boolean-literal: "true"
   46                | "false"

   47 args: %empty
   48     | arg

   49 arg: expr args-supp

   50 args-supp: %empty
   51          | "," arg

   52 call: "object-identifier" "(" args ")"
   53     | expr "." "object-identifier" "(" args ")"

   54 binary-op: expr "=" expr
   55          | expr "<" expr
   56          | expr "<=" expr
   57          | expr "+" expr
   58          | expr "-" expr
   59          | expr "*" expr
   60          | expr "/" expr
   61          | expr "^" expr

   62 unary-op: "not" expr
   63         | "-" expr
   64         | "isnull" expr


Terminals, with rules where they appear

    "end-of-file" (0) 0
    error (256)
    "integer-literal" <integer> (258) 42
    "string-literal" <str> (259) 43
    "type-identifier" <str> (260) 3 5 13 35
    "object-identifier" <str> (261) 9 10 11 12 20 29 30 36 52 53
    "and" <str> (262)
    "bool" <str> (263) 15
    "break" <str> (264)
    "class" <str> (265) 3
    "do" <str> (266) 28
    "double" <str> (267)
    "else" <str> (268) 27
    "extends" <str> (269) 5
    "extern" <str> (270)
    "false" <str> (271) 46
    "for" <str> (272)
    "if" <str> (273) 26 27
    "in" <str> (274) 29 30
    "int32" <str> (275) 14
    "isnull" <str> (276) 64
    "let" <str> (277) 29 30
    "new" <str> (278) 35
    "not" <str> (279) 62
    "self" <str> (280) 37
    "string" <str> (281) 16
    "then" <str> (282) 26 27
    "true" <str> (283) 45
    "unit" <str> (284) 17
    "while" <str> (285) 28
    "vararg" <str> (286)
    "{" <str> (287) 3 23
    "}" <str> (288) 3 23
    "(" <str> (289) 12 39 40 52 53
    ")" <str> (290) 12 39 40 52 53
    ":" <str> (291) 9 10 12 20 29 30
    ";" <str> (292) 9 10 25
    "," <str> (293) 22 51
    "+" <str> (294) 57
    "-" <str> (295) 58 63
    "*" <str> (296) 59
    "/" <str> (297) 60
    "^" <str> (298) 61
    "." <str> (299) 53
    "=" <str> (300) 54
    "<" <str> (301) 55
    "<=" <str> (302) 56
    "<-" <str> (303) 9 11 30
    UMINUS (304)
    MOD (305)


Nonterminals, with rules where they appear

    $accept (51)
        on left: 0
    class <_class> (52)
        on left: 3
        on right: 2
    class-parent <str> (53)
        on left: 4 5
        on right: 3
    type <str> (54)
        on left: 13 14 15 16 17
        on right: 9 10 12 20 29 30
    class-body <body> (55)
        on left: 6 7 8
        on right: 3 7 8
    field <field> (56)
        on left: 9 10
        on right: 7
    method <method> (57)
        on left: 12
        on right: 8
    formals <formals> (58)
        on left: 18 19
        on right: 12
    formal <formals> (59)
        on left: 20
        on right: 19 22
    formal-supp <formals> (60)
        on left: 21 22
        on right: 20
    block <block> (61)
        on left: 23
        on right: 12 41
    block-supp <block> (62)
        on left: 24 25
        on right: 23 25
    args <block> (63)
        on left: 47 48
        on right: 52 53
    arg <block> (64)
        on left: 49
        on right: 48 51
    args-supp <block> (65)
        on left: 50 51
        on right: 49
    expr <expr> (66)
        on left: 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41
        on right: 9 11 23 25 26 27 28 29 30 40 49 53 54 55 56 57 58 59 60 61 62 63 64
    literal <expr> (67)
        on left: 42 43 44
        on right: 38
    boolean-literal <expr> (68)
        on left: 45 46
        on right: 44
    unary-op <expr> (69)
        on left: 62 63 64
        on right: 32
    binary-op <expr> (70)
        on left: 54 55 56 57 58 59 60 61
        on right: 33
    call <expr> (71)
        on left: 52 53
        on right: 34
    assignment <expr> (72)
        on left: 11
        on right: 31
    program (73)
        on left: 1 2
        on right: 0 2


State 0

    0 $accept: . program "end-of-file"

    "class"  shift, and go to state 1

    $default  reduce using rule 1 (program)

    class    go to state 2
    program  go to state 3


State 1

    3 class: "class" . "type-identifier" class-parent "{" class-body "}"

    "type-identifier"  shift, and go to state 4


State 2

    2 program: class . program

    "class"  shift, and go to state 1

    $default  reduce using rule 1 (program)

    class    go to state 2
    program  go to state 5


State 3

    0 $accept: program . "end-of-file"

    "end-of-file"  shift, and go to state 6


State 4

    3 class: "class" "type-identifier" . class-parent "{" class-body "}"

    "extends"  shift, and go to state 7

    $default  reduce using rule 4 (class-parent)

    class-parent  go to state 8


State 5

    2 program: class program .

    $default  reduce using rule 2 (program)


State 6

    0 $accept: program "end-of-file" .

    $default  accept


State 7

    5 class-parent: "extends" . "type-identifier"

    "type-identifier"  shift, and go to state 9


State 8

    3 class: "class" "type-identifier" class-parent . "{" class-body "}"

    "{"  shift, and go to state 10


State 9

    5 class-parent: "extends" "type-identifier" .

    $default  reduce using rule 5 (class-parent)


State 10

    3 class: "class" "type-identifier" class-parent "{" . class-body "}"

    $default  reduce using rule 6 (class-body)

    class-body  go to state 11


State 11

    3 class: "class" "type-identifier" class-parent "{" class-body . "}"
    7 class-body: class-body . field
    8           | class-body . method

    "object-identifier"  shift, and go to state 12
    "}"                  shift, and go to state 13

    field   go to state 14
    method  go to state 15


State 12

    9 field: "object-identifier" . ":" type "<-" expr ";"
   10      | "object-identifier" . ":" type ";"
   12 method: "object-identifier" . "(" formals ")" ":" type block

    "("  shift, and go to state 16
    ":"  shift, and go to state 17


State 13

    3 class: "class" "type-identifier" class-parent "{" class-body "}" .

    $default  reduce using rule 3 (class)


State 14

    7 class-body: class-body field .

    $default  reduce using rule 7 (class-body)


State 15

    8 class-body: class-body method .

    $default  reduce using rule 8 (class-body)


State 16

   12 method: "object-identifier" "(" . formals ")" ":" type block

    "object-identifier"  shift, and go to state 18

    $default  reduce using rule 18 (formals)

    formals  go to state 19
    formal   go to state 20


State 17

    9 field: "object-identifier" ":" . type "<-" expr ";"
   10      | "object-identifier" ":" . type ";"

    "type-identifier"  shift, and go to state 21
    "bool"             shift, and go to state 22
    "int32"            shift, and go to state 23
    "string"           shift, and go to state 24
    "unit"             shift, and go to state 25

    type  go to state 26


State 18

   20 formal: "object-identifier" . ":" type formal-supp

    ":"  shift, and go to state 27


State 19

   12 method: "object-identifier" "(" formals . ")" ":" type block

    ")"  shift, and go to state 28


State 20

   19 formals: formal .

    $default  reduce using rule 19 (formals)


State 21

   13 type: "type-identifier" .

    $default  reduce using rule 13 (type)


State 22

   15 type: "bool" .

    $default  reduce using rule 15 (type)


State 23

   14 type: "int32" .

    $default  reduce using rule 14 (type)


State 24

   16 type: "string" .

    $default  reduce using rule 16 (type)


State 25

   17 type: "unit" .

    $default  reduce using rule 17 (type)


State 26

    9 field: "object-identifier" ":" type . "<-" expr ";"
   10      | "object-identifier" ":" type . ";"

    ";"   shift, and go to state 29
    "<-"  shift, and go to state 30


State 27

   20 formal: "object-identifier" ":" . type formal-supp

    "type-identifier"  shift, and go to state 21
    "bool"             shift, and go to state 22
    "int32"            shift, and go to state 23
    "string"           shift, and go to state 24
    "unit"             shift, and go to state 25

    type  go to state 31


State 28

   12 method: "object-identifier" "(" formals ")" . ":" type block

    ":"  shift, and go to state 32


State 29

   10 field: "object-identifier" ":" type ";" .

    $default  reduce using rule 10 (field)


State 30

    9 field: "object-identifier" ":" type "<-" . expr ";"

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    block            go to state 48
    expr             go to state 49
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 31

   20 formal: "object-identifier" ":" type . formal-supp

    ","  shift, and go to state 56

    $default  reduce using rule 21 (formal-supp)

    formal-supp  go to state 57


State 32

   12 method: "object-identifier" "(" formals ")" ":" . type block

    "type-identifier"  shift, and go to state 21
    "bool"             shift, and go to state 22
    "int32"            shift, and go to state 23
    "string"           shift, and go to state 24
    "unit"             shift, and go to state 25

    type  go to state 58


State 33

   42 literal: "integer-literal" .

    $default  reduce using rule 42 (literal)


State 34

   43 literal: "string-literal" .

    $default  reduce using rule 43 (literal)


State 35

   11 assignment: "object-identifier" . "<-" expr
   36 expr: "object-identifier" .
   52 call: "object-identifier" . "(" args ")"

    "("   shift, and go to state 59
    "<-"  shift, and go to state 60

    $default  reduce using rule 36 (expr)


State 36

   46 boolean-literal: "false" .

    $default  reduce using rule 46 (boolean-literal)


State 37

   26 expr: "if" . expr "then" expr
   27     | "if" . expr "then" expr "else" expr

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    block            go to state 48
    expr             go to state 61
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 38

   64 unary-op: "isnull" . expr

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    block            go to state 48
    expr             go to state 62
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 39

   29 expr: "let" . "object-identifier" ":" type "in" expr
   30     | "let" . "object-identifier" ":" type "<-" expr "in" expr

    "object-identifier"  shift, and go to state 63


State 40

   35 expr: "new" . "type-identifier"

    "type-identifier"  shift, and go to state 64


State 41

   62 unary-op: "not" . expr

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    block            go to state 48
    expr             go to state 65
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 42

   37 expr: "self" .

    $default  reduce using rule 37 (expr)


State 43

   45 boolean-literal: "true" .

    $default  reduce using rule 45 (boolean-literal)


State 44

   28 expr: "while" . expr "do" expr

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    block            go to state 48
    expr             go to state 66
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 45

   23 block: "{" . expr block-supp "}"

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    block            go to state 48
    expr             go to state 67
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 46

   39 expr: "(" . ")"
   40     | "(" . expr ")"

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    ")"                  shift, and go to state 68
    "-"                  shift, and go to state 47

    block            go to state 48
    expr             go to state 69
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 47

   63 unary-op: "-" . expr

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    block            go to state 48
    expr             go to state 70
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 48

   41 expr: block .

    $default  reduce using rule 41 (expr)


State 49

    9 field: "object-identifier" ":" type "<-" expr . ";"
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    ";"   shift, and go to state 71
    "+"   shift, and go to state 72
    "-"   shift, and go to state 73
    "*"   shift, and go to state 74
    "/"   shift, and go to state 75
    "^"   shift, and go to state 76
    "."   shift, and go to state 77
    "="   shift, and go to state 78
    "<"   shift, and go to state 79
    "<="  shift, and go to state 80


State 50

   38 expr: literal .

    $default  reduce using rule 38 (expr)


State 51

   44 literal: boolean-literal .

    $default  reduce using rule 44 (literal)


State 52

   32 expr: unary-op .

    $default  reduce using rule 32 (expr)


State 53

   33 expr: binary-op .

    $default  reduce using rule 33 (expr)


State 54

   34 expr: call .

    $default  reduce using rule 34 (expr)


State 55

   31 expr: assignment .

    $default  reduce using rule 31 (expr)


State 56

   22 formal-supp: "," . formal

    "object-identifier"  shift, and go to state 18

    formal  go to state 81


State 57

   20 formal: "object-identifier" ":" type formal-supp .

    $default  reduce using rule 20 (formal)


State 58

   12 method: "object-identifier" "(" formals ")" ":" type . block

    "{"  shift, and go to state 45

    block  go to state 82


State 59

   52 call: "object-identifier" "(" . args ")"

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    $default  reduce using rule 47 (args)

    block            go to state 48
    args             go to state 83
    arg              go to state 84
    expr             go to state 85
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 60

   11 assignment: "object-identifier" "<-" . expr

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    block            go to state 48
    expr             go to state 86
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 61

   26 expr: "if" expr . "then" expr
   27     | "if" expr . "then" expr "else" expr
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "then"  shift, and go to state 87
    "+"     shift, and go to state 72
    "-"     shift, and go to state 73
    "*"     shift, and go to state 74
    "/"     shift, and go to state 75
    "^"     shift, and go to state 76
    "."     shift, and go to state 77
    "="     shift, and go to state 78
    "<"     shift, and go to state 79
    "<="    shift, and go to state 80


State 62

   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr
   64 unary-op: "isnull" expr .

    "^"  shift, and go to state 76
    "."  shift, and go to state 77

    $default  reduce using rule 64 (unary-op)


State 63

   29 expr: "let" "object-identifier" . ":" type "in" expr
   30     | "let" "object-identifier" . ":" type "<-" expr "in" expr

    ":"  shift, and go to state 88


State 64

   35 expr: "new" "type-identifier" .

    $default  reduce using rule 35 (expr)


State 65

   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr
   62 unary-op: "not" expr .

    "+"   shift, and go to state 72
    "-"   shift, and go to state 73
    "*"   shift, and go to state 74
    "/"   shift, and go to state 75
    "^"   shift, and go to state 76
    "."   shift, and go to state 77
    "="   shift, and go to state 78
    "<"   shift, and go to state 79
    "<="  shift, and go to state 80

    $default  reduce using rule 62 (unary-op)


State 66

   28 expr: "while" expr . "do" expr
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "do"  shift, and go to state 89
    "+"   shift, and go to state 72
    "-"   shift, and go to state 73
    "*"   shift, and go to state 74
    "/"   shift, and go to state 75
    "^"   shift, and go to state 76
    "."   shift, and go to state 77
    "="   shift, and go to state 78
    "<"   shift, and go to state 79
    "<="  shift, and go to state 80


State 67

   23 block: "{" expr . block-supp "}"
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    ";"   shift, and go to state 90
    "+"   shift, and go to state 72
    "-"   shift, and go to state 73
    "*"   shift, and go to state 74
    "/"   shift, and go to state 75
    "^"   shift, and go to state 76
    "."   shift, and go to state 77
    "="   shift, and go to state 78
    "<"   shift, and go to state 79
    "<="  shift, and go to state 80

    $default  reduce using rule 24 (block-supp)

    block-supp  go to state 91


State 68

   39 expr: "(" ")" .

    $default  reduce using rule 39 (expr)


State 69

   40 expr: "(" expr . ")"
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    ")"   shift, and go to state 92
    "+"   shift, and go to state 72
    "-"   shift, and go to state 73
    "*"   shift, and go to state 74
    "/"   shift, and go to state 75
    "^"   shift, and go to state 76
    "."   shift, and go to state 77
    "="   shift, and go to state 78
    "<"   shift, and go to state 79
    "<="  shift, and go to state 80


State 70

   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr
   63 unary-op: "-" expr .

    "*"  shift, and go to state 74
    "/"  shift, and go to state 75
    "^"  shift, and go to state 76
    "."  shift, and go to state 77

    $default  reduce using rule 63 (unary-op)


State 71

    9 field: "object-identifier" ":" type "<-" expr ";" .

    $default  reduce using rule 9 (field)


State 72

   57 binary-op: expr "+" . expr

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    block            go to state 48
    expr             go to state 93
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 73

   58 binary-op: expr "-" . expr

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    block            go to state 48
    expr             go to state 94
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 74

   59 binary-op: expr "*" . expr

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    block            go to state 48
    expr             go to state 95
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 75

   60 binary-op: expr "/" . expr

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    block            go to state 48
    expr             go to state 96
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 76

   61 binary-op: expr "^" . expr

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    block            go to state 48
    expr             go to state 97
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 77

   53 call: expr "." . "object-identifier" "(" args ")"

    "object-identifier"  shift, and go to state 98


State 78

   54 binary-op: expr "=" . expr

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    block            go to state 48
    expr             go to state 99
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 79

   55 binary-op: expr "<" . expr

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    block            go to state 48
    expr             go to state 100
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 80

   56 binary-op: expr "<=" . expr

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    block            go to state 48
    expr             go to state 101
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 81

   22 formal-supp: "," formal .

    $default  reduce using rule 22 (formal-supp)


State 82

   12 method: "object-identifier" "(" formals ")" ":" type block .

    $default  reduce using rule 12 (method)


State 83

   52 call: "object-identifier" "(" args . ")"

    ")"  shift, and go to state 102


State 84

   48 args: arg .

    $default  reduce using rule 48 (args)


State 85

   49 arg: expr . args-supp
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    ","   shift, and go to state 103
    "+"   shift, and go to state 72
    "-"   shift, and go to state 73
    "*"   shift, and go to state 74
    "/"   shift, and go to state 75
    "^"   shift, and go to state 76
    "."   shift, and go to state 77
    "="   shift, and go to state 78
    "<"   shift, and go to state 79
    "<="  shift, and go to state 80

    $default  reduce using rule 50 (args-supp)

    args-supp  go to state 104


State 86

   11 assignment: "object-identifier" "<-" expr .
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "+"   shift, and go to state 72
    "-"   shift, and go to state 73
    "*"   shift, and go to state 74
    "/"   shift, and go to state 75
    "^"   shift, and go to state 76
    "."   shift, and go to state 77
    "="   shift, and go to state 78
    "<"   shift, and go to state 79
    "<="  shift, and go to state 80

    $default  reduce using rule 11 (assignment)


State 87

   26 expr: "if" expr "then" . expr
   27     | "if" expr "then" . expr "else" expr

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    block            go to state 48
    expr             go to state 105
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 88

   29 expr: "let" "object-identifier" ":" . type "in" expr
   30     | "let" "object-identifier" ":" . type "<-" expr "in" expr

    "type-identifier"  shift, and go to state 21
    "bool"             shift, and go to state 22
    "int32"            shift, and go to state 23
    "string"           shift, and go to state 24
    "unit"             shift, and go to state 25

    type  go to state 106


State 89

   28 expr: "while" expr "do" . expr

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    block            go to state 48
    expr             go to state 107
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 90

   25 block-supp: ";" . expr block-supp

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    block            go to state 48
    expr             go to state 108
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 91

   23 block: "{" expr block-supp . "}"

    "}"  shift, and go to state 109


State 92

   40 expr: "(" expr ")" .

    $default  reduce using rule 40 (expr)


State 93

   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   57          | expr "+" expr .
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "*"  shift, and go to state 74
    "/"  shift, and go to state 75
    "^"  shift, and go to state 76
    "."  shift, and go to state 77

    $default  reduce using rule 57 (binary-op)


State 94

   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   58          | expr "-" expr .
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "*"  shift, and go to state 74
    "/"  shift, and go to state 75
    "^"  shift, and go to state 76
    "."  shift, and go to state 77

    $default  reduce using rule 58 (binary-op)


State 95

   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   59          | expr "*" expr .
   60          | expr . "/" expr
   61          | expr . "^" expr

    "^"  shift, and go to state 76
    "."  shift, and go to state 77

    $default  reduce using rule 59 (binary-op)


State 96

   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   60          | expr "/" expr .
   61          | expr . "^" expr

    "^"  shift, and go to state 76
    "."  shift, and go to state 77

    $default  reduce using rule 60 (binary-op)


State 97

   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr
   61          | expr "^" expr .

    "^"  shift, and go to state 76
    "."  shift, and go to state 77

    $default  reduce using rule 61 (binary-op)


State 98

   53 call: expr "." "object-identifier" . "(" args ")"

    "("  shift, and go to state 110


State 99

   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   54          | expr "=" expr .
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "+"  shift, and go to state 72
    "-"  shift, and go to state 73
    "*"  shift, and go to state 74
    "/"  shift, and go to state 75
    "^"  shift, and go to state 76
    "."  shift, and go to state 77

    "="   error (nonassociative)
    "<"   error (nonassociative)
    "<="  error (nonassociative)

    $default  reduce using rule 54 (binary-op)


State 100

   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   55          | expr "<" expr .
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "+"  shift, and go to state 72
    "-"  shift, and go to state 73
    "*"  shift, and go to state 74
    "/"  shift, and go to state 75
    "^"  shift, and go to state 76
    "."  shift, and go to state 77

    "="   error (nonassociative)
    "<"   error (nonassociative)
    "<="  error (nonassociative)

    $default  reduce using rule 55 (binary-op)


State 101

   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   56          | expr "<=" expr .
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "+"  shift, and go to state 72
    "-"  shift, and go to state 73
    "*"  shift, and go to state 74
    "/"  shift, and go to state 75
    "^"  shift, and go to state 76
    "."  shift, and go to state 77

    "="   error (nonassociative)
    "<"   error (nonassociative)
    "<="  error (nonassociative)

    $default  reduce using rule 56 (binary-op)


State 102

   52 call: "object-identifier" "(" args ")" .

    $default  reduce using rule 52 (call)


State 103

   51 args-supp: "," . arg

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    block            go to state 48
    arg              go to state 111
    expr             go to state 85
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 104

   49 arg: expr args-supp .

    $default  reduce using rule 49 (arg)


State 105

   26 expr: "if" expr "then" expr .
   27     | "if" expr "then" expr . "else" expr
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "else"  shift, and go to state 112
    "+"     shift, and go to state 72
    "-"     shift, and go to state 73
    "*"     shift, and go to state 74
    "/"     shift, and go to state 75
    "^"     shift, and go to state 76
    "."     shift, and go to state 77
    "="     shift, and go to state 78
    "<"     shift, and go to state 79
    "<="    shift, and go to state 80

    $default  reduce using rule 26 (expr)


State 106

   29 expr: "let" "object-identifier" ":" type . "in" expr
   30     | "let" "object-identifier" ":" type . "<-" expr "in" expr

    "in"  shift, and go to state 113
    "<-"  shift, and go to state 114


State 107

   28 expr: "while" expr "do" expr .
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "+"   shift, and go to state 72
    "-"   shift, and go to state 73
    "*"   shift, and go to state 74
    "/"   shift, and go to state 75
    "^"   shift, and go to state 76
    "."   shift, and go to state 77
    "="   shift, and go to state 78
    "<"   shift, and go to state 79
    "<="  shift, and go to state 80

    $default  reduce using rule 28 (expr)


State 108

   25 block-supp: ";" expr . block-supp
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    ";"   shift, and go to state 90
    "+"   shift, and go to state 72
    "-"   shift, and go to state 73
    "*"   shift, and go to state 74
    "/"   shift, and go to state 75
    "^"   shift, and go to state 76
    "."   shift, and go to state 77
    "="   shift, and go to state 78
    "<"   shift, and go to state 79
    "<="  shift, and go to state 80

    $default  reduce using rule 24 (block-supp)

    block-supp  go to state 115


State 109

   23 block: "{" expr block-supp "}" .

    $default  reduce using rule 23 (block)


State 110

   53 call: expr "." "object-identifier" "(" . args ")"

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    $default  reduce using rule 47 (args)

    block            go to state 48
    args             go to state 116
    arg              go to state 84
    expr             go to state 85
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 111

   51 args-supp: "," arg .

    $default  reduce using rule 51 (args-supp)


State 112

   27 expr: "if" expr "then" expr "else" . expr

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    block            go to state 48
    expr             go to state 117
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 113

   29 expr: "let" "object-identifier" ":" type "in" . expr

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    block            go to state 48
    expr             go to state 118
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 114

   30 expr: "let" "object-identifier" ":" type "<-" . expr "in" expr

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    block            go to state 48
    expr             go to state 119
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 115

   25 block-supp: ";" expr block-supp .

    $default  reduce using rule 25 (block-supp)


State 116

   53 call: expr "." "object-identifier" "(" args . ")"

    ")"  shift, and go to state 120


State 117

   27 expr: "if" expr "then" expr "else" expr .
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "+"   shift, and go to state 72
    "-"   shift, and go to state 73
    "*"   shift, and go to state 74
    "/"   shift, and go to state 75
    "^"   shift, and go to state 76
    "."   shift, and go to state 77
    "="   shift, and go to state 78
    "<"   shift, and go to state 79
    "<="  shift, and go to state 80

    $default  reduce using rule 27 (expr)


State 118

   29 expr: "let" "object-identifier" ":" type "in" expr .
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "+"   shift, and go to state 72
    "-"   shift, and go to state 73
    "*"   shift, and go to state 74
    "/"   shift, and go to state 75
    "^"   shift, and go to state 76
    "."   shift, and go to state 77
    "="   shift, and go to state 78
    "<"   shift, and go to state 79
    "<="  shift, and go to state 80

    $default  reduce using rule 29 (expr)


State 119

   30 expr: "let" "object-identifier" ":" type "<-" expr . "in" expr
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "in"  shift, and go to state 121
    "+"   shift, and go to state 72
    "-"   shift, and go to state 73
    "*"   shift, and go to state 74
    "/"   shift, and go to state 75
    "^"   shift, and go to state 76
    "."   shift, and go to state 77
    "="   shift, and go to state 78
    "<"   shift, and go to state 79
    "<="  shift, and go to state 80


State 120

   53 call: expr "." "object-identifier" "(" args ")" .

    $default  reduce using rule 53 (call)


State 121

   30 expr: "let" "object-identifier" ":" type "<-" expr "in" . expr

    "integer-literal"    shift, and go to state 33
    "string-literal"     shift, and go to state 34
    "object-identifier"  shift, and go to state 35
    "false"              shift, and go to state 36
    "if"                 shift, and go to state 37
    "isnull"             shift, and go to state 38
    "let"                shift, and go to state 39
    "new"                shift, and go to state 40
    "not"                shift, and go to state 41
    "self"               shift, and go to state 42
    "true"               shift, and go to state 43
    "while"              shift, and go to state 44
    "{"                  shift, and go to state 45
    "("                  shift, and go to state 46
    "-"                  shift, and go to state 47

    block            go to state 48
    expr             go to state 122
    literal          go to state 50
    boolean-literal  go to state 51
    unary-op         go to state 52
    binary-op        go to state 53
    call             go to state 54
    assignment       go to state 55


State 122

   30 expr: "let" "object-identifier" ":" type "<-" expr "in" expr .
   53 call: expr . "." "object-identifier" "(" args ")"
   54 binary-op: expr . "=" expr
   55          | expr . "<" expr
   56          | expr . "<=" expr
   57          | expr . "+" expr
   58          | expr . "-" expr
   59          | expr . "*" expr
   60          | expr . "/" expr
   61          | expr . "^" expr

    "+"   shift, and go to state 72
    "-"   shift, and go to state 73
    "*"   shift, and go to state 74
    "/"   shift, and go to state 75
    "^"   shift, and go to state 76
    "."   shift, and go to state 77
    "="   shift, and go to state 78
    "<"   shift, and go to state 79
    "<="  shift, and go to state 80

    $default  reduce using rule 30 (expr)
